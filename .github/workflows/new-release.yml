name: Release to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, v0.2.3, etc.)

jobs:
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Set up Python
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.12"  # Use the latest stable Python for building

      - name: Install build dependencies
        run: |
          uv pip install build twine
          uv sync --all-extras --dev

      - name: Verify version matches tag
        run: |
          # Extract tag version (remove the 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          # Extract version from your package
          PACKAGE_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          
          # Verify they match
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Version mismatch: Tag version ($TAG_VERSION) doesn't match package version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "Version verification passed: $PACKAGE_VERSION"

      - name: Run tests
        run: |
          uv pip install pytest
          pytest

      - name: Build package
        run: python -m build

      - name: Verify package
        run: twine check dist/*

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  create-release:
    name: Create GitHub Release
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating GitHub releases

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/pysynthbio
    permissions:
      id-token: write  

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-to-pypi:
    name: Publish to PyPI
    needs: [build, publish-to-testpypi]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pysynthbio
    permissions:
      id-token: write  

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  update-docs:
    name: Publish to PyPI
    needs: [build, publish-to-testpypi]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pysynthbio
    permissions:
      id-token: write  
    
    steps:
     - name: Setup UV and Python
       uses: astral-sh/setup-uv@v5
       with:
        python-version: "3.12"
      
     - name: Install dependencies
       run: |
        uv sync --all-extras --dev 
        uv pip install sphinx sphinx-rtd-theme
      
     - name: Commit rendered docs to main
       run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add --force docs/*
        git commit -m 'Render docs' || echo "No changes to commit"

     - name: Create Pull Request
       uses: peter-evans/create-pull-request@v7
       title: "Automatic PR for updated docs upon new release"
       body: |
         This is PR automatically filed by the new-release.yml GitHub Action 
         which is triggered whenever a new release of this package is made. 
         This PR shows an automatic rendering of the docs. 
